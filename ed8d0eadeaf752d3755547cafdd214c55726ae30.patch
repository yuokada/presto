From ed8d0eadeaf752d3755547cafdd214c55726ae30 Mon Sep 17 00:00:00 2001
From: Christina Wallin <christina.wallin@teradata.com>
Date: Mon, 18 Jul 2016 15:13:59 -0400
Subject: [PATCH] Add skeleton GitHub connector

---
 pom.xml                                            |   9 +
 presto-github/pom.xml                              | 147 +++++++++++++
 .../facebook/presto/github/GithubApiEndpoints.java |  51 +++++
 .../com/facebook/presto/github/GithubClient.java   | 243 +++++++++++++++++++++
 .../com/facebook/presto/github/GithubColumn.java   |  75 +++++++
 .../facebook/presto/github/GithubColumnHandle.java | 108 +++++++++
 .../com/facebook/presto/github/GithubConfig.java   |  99 +++++++++
 .../facebook/presto/github/GithubConnector.java    |  87 ++++++++
 .../presto/github/GithubConnectorFactory.java      |  77 +++++++
 .../facebook/presto/github/GithubConnectorId.java  |  54 +++++
 .../presto/github/GithubHandleResolver.java        |  55 +++++
 .../com/facebook/presto/github/GithubMetadata.java | 189 ++++++++++++++++
 .../com/facebook/presto/github/GithubModule.java   |  53 +++++
 .../com/facebook/presto/github/GithubPlugin.java   |  60 +++++
 .../facebook/presto/github/GithubRecordCursor.java | 154 +++++++++++++
 .../facebook/presto/github/GithubRecordSet.java    |  47 ++++
 .../presto/github/GithubRecordSetProvider.java     |  45 ++++
 .../com/facebook/presto/github/GithubSchema.java   |  39 ++++
 .../com/facebook/presto/github/GithubSplit.java    |  54 +++++
 .../facebook/presto/github/GithubSplitManager.java |  60 +++++
 .../com/facebook/presto/github/GithubTable.java    |  62 ++++++
 .../facebook/presto/github/GithubTableHandle.java  |  84 +++++++
 .../presto/github/GithubTableLayoutHandle.java     |  63 ++++++
 .../presto/github/GithubTransactionHandle.java     |  23 ++
 .../java/com/facebook/presto/github/Types.java     |  35 +++
 25 files changed, 1973 insertions(+)
 create mode 100644 presto-github/pom.xml
 create mode 100644 presto-github/src/main/java/com/facebook/presto/github/GithubApiEndpoints.java
 create mode 100644 presto-github/src/main/java/com/facebook/presto/github/GithubClient.java
 create mode 100644 presto-github/src/main/java/com/facebook/presto/github/GithubColumn.java
 create mode 100644 presto-github/src/main/java/com/facebook/presto/github/GithubColumnHandle.java
 create mode 100644 presto-github/src/main/java/com/facebook/presto/github/GithubConfig.java
 create mode 100644 presto-github/src/main/java/com/facebook/presto/github/GithubConnector.java
 create mode 100644 presto-github/src/main/java/com/facebook/presto/github/GithubConnectorFactory.java
 create mode 100644 presto-github/src/main/java/com/facebook/presto/github/GithubConnectorId.java
 create mode 100644 presto-github/src/main/java/com/facebook/presto/github/GithubHandleResolver.java
 create mode 100644 presto-github/src/main/java/com/facebook/presto/github/GithubMetadata.java
 create mode 100644 presto-github/src/main/java/com/facebook/presto/github/GithubModule.java
 create mode 100644 presto-github/src/main/java/com/facebook/presto/github/GithubPlugin.java
 create mode 100644 presto-github/src/main/java/com/facebook/presto/github/GithubRecordCursor.java
 create mode 100644 presto-github/src/main/java/com/facebook/presto/github/GithubRecordSet.java
 create mode 100644 presto-github/src/main/java/com/facebook/presto/github/GithubRecordSetProvider.java
 create mode 100644 presto-github/src/main/java/com/facebook/presto/github/GithubSchema.java
 create mode 100644 presto-github/src/main/java/com/facebook/presto/github/GithubSplit.java
 create mode 100644 presto-github/src/main/java/com/facebook/presto/github/GithubSplitManager.java
 create mode 100644 presto-github/src/main/java/com/facebook/presto/github/GithubTable.java
 create mode 100644 presto-github/src/main/java/com/facebook/presto/github/GithubTableHandle.java
 create mode 100644 presto-github/src/main/java/com/facebook/presto/github/GithubTableLayoutHandle.java
 create mode 100644 presto-github/src/main/java/com/facebook/presto/github/GithubTransactionHandle.java
 create mode 100644 presto-github/src/main/java/com/facebook/presto/github/Types.java

diff --git a/pom.xml b/pom.xml
index f0f059ce8..302c12dd3 100644
--- a/pom.xml
+++ b/pom.xml
@@ -51,6 +51,7 @@
         <dep.slice.version>0.22</dep.slice.version>
         <dep.aws-sdk.version>1.9.40</dep.aws-sdk.version>
         <dep.tempto.version>1.8</dep.tempto.version>
+        <dep.jackson.version>2.6.7</dep.jackson.version>
 
         <!--
         Versions newer than 6.9 appear to have an issue where the @BeforeClass method in
@@ -88,6 +89,7 @@
         <module>presto-hive-cdh5</module>
         <module>presto-teradata-functions</module>
         <module>presto-example-http</module>
+        <module>presto-github</module>
         <module>presto-local-file</module>
         <module>presto-tpch</module>
         <module>presto-raptor</module>
@@ -155,6 +157,13 @@
 
             <dependency>
                 <groupId>com.facebook.presto</groupId>
+                <artifactId>presto-github</artifactId>
+                <version>${project.version}</version>
+                <type>zip</type>
+            </dependency>
+
+            <dependency>
+                <groupId>com.facebook.presto</groupId>
                 <artifactId>presto-local-file</artifactId>
                 <version>${project.version}</version>
             </dependency>
diff --git a/presto-github/pom.xml b/presto-github/pom.xml
new file mode 100644
index 000000000..e60f57e99
--- /dev/null
+++ b/presto-github/pom.xml
@@ -0,0 +1,147 @@
+<?xml version="1.0"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+    <parent>
+        <groupId>com.facebook.presto</groupId>
+        <artifactId>presto-root</artifactId>
+        <version>0.151-SNAPSHOT</version>
+    </parent>
+
+    <artifactId>presto-github</artifactId>
+    <description>Presto - Github Connector</description>
+    <packaging>presto-plugin</packaging>
+
+    <properties>
+        <air.main.basedir>${project.parent.basedir}</air.main.basedir>
+    </properties>
+
+    <dependencies>
+        <dependency>
+            <groupId>io.airlift</groupId>
+            <artifactId>bootstrap</artifactId>
+        </dependency>
+
+        <dependency>
+            <groupId>io.airlift</groupId>
+            <artifactId>json</artifactId>
+        </dependency>
+
+        <dependency>
+            <groupId>io.airlift</groupId>
+            <artifactId>log</artifactId>
+        </dependency>
+
+        <dependency>
+            <groupId>io.airlift</groupId>
+            <artifactId>configuration</artifactId>
+        </dependency>
+
+		<dependency>
+		    <groupId>org.eclipse.jetty</groupId>
+		    <artifactId>jetty-client</artifactId>
+		    <version>9.3.11.M0</version>
+		</dependency>
+
+        <dependency>
+            <groupId>com.google.guava</groupId>
+            <artifactId>guava</artifactId>
+        </dependency>
+
+        <dependency>
+            <groupId>com.google.inject</groupId>
+            <artifactId>guice</artifactId>
+        </dependency>
+
+        <dependency>
+            <groupId>javax.validation</groupId>
+            <artifactId>validation-api</artifactId>
+        </dependency>
+
+        <!-- Presto SPI -->
+        <dependency>
+            <groupId>com.facebook.presto</groupId>
+            <artifactId>presto-spi</artifactId>
+            <scope>provided</scope>
+        </dependency>
+
+        <dependency>
+            <groupId>io.airlift</groupId>
+            <artifactId>slice</artifactId>
+            <scope>provided</scope>
+        </dependency>
+
+        <dependency>
+            <groupId>javax.inject</groupId>
+            <artifactId>javax.inject</artifactId>
+            <scope>provided</scope>
+        </dependency>
+
+        <dependency>
+            <groupId>com.fasterxml.jackson.core</groupId>
+            <artifactId>jackson-annotations</artifactId>
+            <scope>provided</scope>
+        </dependency>
+
+        <dependency>
+            <groupId>com.fasterxml.jackson.core</groupId>
+            <artifactId>jackson-core</artifactId>
+            <scope>provided</scope>
+        </dependency>
+
+        <dependency>
+            <groupId>com.fasterxml.jackson.core</groupId>
+            <artifactId>jackson-databind</artifactId>
+            <scope>provided</scope>
+        </dependency>
+
+        <dependency>
+            <groupId>com.github.fge</groupId>
+            <artifactId>uri-template</artifactId>
+            <version>0.9</version>
+        </dependency>
+<!--
+        <dependency>
+          <groupId>com.damnhandy</groupId>
+          <artifactId>handy-uri-templates</artifactId>
+          <version>2.1.6</version>
+        </dependency>
+-->
+
+        <!-- for testing -->
+        <dependency>
+            <groupId>com.facebook.presto</groupId>
+            <artifactId>presto-main</artifactId>
+            <scope>test</scope>
+        </dependency>
+
+        <dependency>
+            <groupId>org.testng</groupId>
+            <artifactId>testng</artifactId>
+            <scope>test</scope>
+        </dependency>
+
+        <dependency>
+            <groupId>io.airlift</groupId>
+            <artifactId>testing</artifactId>
+            <scope>test</scope>
+        </dependency>
+
+        <dependency>
+            <groupId>io.airlift</groupId>
+            <artifactId>http-server</artifactId>
+            <scope>test</scope>
+        </dependency>
+
+        <dependency>
+            <groupId>io.airlift</groupId>
+            <artifactId>node</artifactId>
+            <scope>test</scope>
+        </dependency>
+
+        <dependency>
+            <groupId>javax.servlet</groupId>
+            <artifactId>javax.servlet-api</artifactId>
+            <scope>test</scope>
+        </dependency>
+    </dependencies>
+</project>
diff --git a/presto-github/src/main/java/com/facebook/presto/github/GithubApiEndpoints.java b/presto-github/src/main/java/com/facebook/presto/github/GithubApiEndpoints.java
new file mode 100644
index 000000000..32ec73afc
--- /dev/null
+++ b/presto-github/src/main/java/com/facebook/presto/github/GithubApiEndpoints.java
@@ -0,0 +1,51 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.facebook.presto.github;
+
+import com.fasterxml.jackson.annotation.JsonCreator;
+import com.fasterxml.jackson.annotation.JsonProperty;
+import com.github.fge.uritemplate.URITemplate;
+import com.github.fge.uritemplate.URITemplateParseException;
+
+public class GithubApiEndpoints
+{
+    URITemplate userRepoTemplate;
+    URITemplate orgRepoTemplate;
+
+    @JsonCreator
+    public GithubApiEndpoints(
+            @JsonProperty("user_repositories_url") String userRepoUriTemplate,
+            @JsonProperty("organization_repositories_url") String orgRepoUriTemplate)
+            throws URITemplateParseException
+    {
+        // Add basic authentication
+        userRepoUriTemplate = userRepoUriTemplate
+                .replace("https://", "https://{username}:{token}@");
+        this.userRepoTemplate = new URITemplate(userRepoUriTemplate);
+
+        orgRepoUriTemplate = orgRepoUriTemplate
+                .replace("https://", "https://{username}:{token}@");
+        this.orgRepoTemplate = new URITemplate(orgRepoUriTemplate);
+    }
+
+    public URITemplate getUserRepoTemplate()
+    {
+        return userRepoTemplate;
+    }
+
+    public URITemplate getOrgRepoTemplate()
+    {
+        return orgRepoTemplate;
+    }
+}
diff --git a/presto-github/src/main/java/com/facebook/presto/github/GithubClient.java b/presto-github/src/main/java/com/facebook/presto/github/GithubClient.java
new file mode 100644
index 000000000..e9033bf99
--- /dev/null
+++ b/presto-github/src/main/java/com/facebook/presto/github/GithubClient.java
@@ -0,0 +1,243 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.facebook.presto.github;
+
+import com.facebook.presto.spi.PrestoException;
+import com.fasterxml.jackson.core.type.TypeReference;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.github.fge.uritemplate.URITemplateException;
+import com.github.fge.uritemplate.vars.VariableMap;
+import com.google.common.base.Splitter;
+import com.google.common.base.Supplier;
+import com.google.common.base.Suppliers;
+import com.google.common.base.Throwables;
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableSet;
+import io.airlift.json.JsonCodec;
+import org.eclipse.jetty.client.HttpClient;
+import org.eclipse.jetty.client.api.ContentResponse;
+import org.eclipse.jetty.http.HttpFields;
+import org.eclipse.jetty.http.HttpHeader;
+import org.eclipse.jetty.http.HttpMethod;
+import org.eclipse.jetty.util.ssl.SslContextFactory;
+
+import javax.inject.Inject;
+
+import java.io.IOException;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.util.ArrayList;
+import java.util.Base64;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import static com.facebook.presto.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;
+import static java.nio.charset.StandardCharsets.UTF_8;
+import static java.util.Objects.requireNonNull;
+
+public class GithubClient
+{
+    private final Supplier<GithubApiEndpoints> endpoints;
+    private final Supplier<List<GithubSchema>> schemas;
+
+    private final Map<String, GithubTable> tables;
+
+    @Inject
+    public GithubClient(
+            GithubConfig config,
+            JsonCodec<GithubApiEndpoints> apiCodec,
+            JsonCodec<List<GithubSchema>> schemaCodec)
+            throws Exception
+    {
+        requireNonNull(config, "config is null");
+        endpoints = Suppliers.memoize(endpointsSupplier(apiCodec, config));
+        schemas = Suppliers.memoize(schemasSupplier(schemaCodec, endpoints, config));
+        tables = ImmutableMap.of();
+    }
+
+    private static String getAuthHeader(String token)
+    {
+        String encoded = Base64.getEncoder().encodeToString(token.trim().getBytes(UTF_8));
+        return "Basic " + encoded;
+    }
+
+    public static byte[] getContent(URI target, String token)
+    {
+        HttpClient httpClient = new HttpClient(new SslContextFactory());
+        try {
+            httpClient.start();
+            ContentResponse response = httpClient.newRequest(target)
+                    .agent("presto-github-connector")
+                    .method(HttpMethod.GET)
+                    .header(HttpHeader.AUTHORIZATION, getAuthHeader(token))
+                    .send();
+
+            if (response.getStatus() != 200) {
+                throw new PrestoException(GENERIC_INTERNAL_ERROR, response.getReason());
+            }
+
+            return response.getContent();
+        }
+        catch (Exception e) {
+            throw new PrestoException(GENERIC_INTERNAL_ERROR, e);
+        }
+        finally {
+            try {
+                httpClient.stop();
+            }
+            catch (Exception e) {
+            }
+        }
+    }
+
+    public static HttpFields getHeaders(URI target, String token)
+    {
+        HttpClient httpClient = new HttpClient(new SslContextFactory());
+        try {
+            httpClient.start();
+            ContentResponse response = httpClient.newRequest(target)
+                    .agent("presto-github-connector")
+                    .method(HttpMethod.GET)
+                    .header(HttpHeader.AUTHORIZATION, getAuthHeader(token))
+                    .send();
+
+            if (response.getStatus() != 200) {
+                throw new PrestoException(GENERIC_INTERNAL_ERROR, response.getReason());
+            }
+
+            return response.getHeaders();
+        }
+        catch (Exception e) {
+            throw new PrestoException(GENERIC_INTERNAL_ERROR, e);
+        }
+        finally {
+            try {
+                httpClient.stop();
+            }
+            catch (Exception e) {
+            }
+        }
+    }
+
+    public int getLastPage(URI uri, String token)
+    {
+        HttpFields headers = getHeaders(uri, token);
+        String links = headers.get("Link");
+        for (String link : Splitter.on(',').split(links)) {
+            if (!link.endsWith("rel=\"last\"")) {
+                continue;
+            }
+            List<String> parts = Splitter.on(' ').omitEmptyStrings().splitToList(link);
+            String target = parts.get(0);
+            int start = target.lastIndexOf('=') + 1;
+            int end = target.lastIndexOf('>');
+            String n = target.substring(start, end);
+            return Integer.parseInt(n);
+        }
+        return 1;
+    }
+
+    /**
+     * Given a string of bytes, returns a list of JSON objects represented by
+     * a map of key-value pairs.
+     */
+    public static List<Map<String, Object>> parseJsonBytesToRecordList(byte[] bytes)
+    {
+        String jsonLines = new String(bytes, UTF_8);
+
+        ObjectMapper objectMapper = new ObjectMapper();
+        try {
+            return ((ArrayList<Map<String, Object>>) objectMapper.readValue(jsonLines, new TypeReference<ArrayList<Map<String, Object>>>() { }));
+        }
+        catch (IOException e) {
+            throw new PrestoException(GENERIC_INTERNAL_ERROR, e);
+        }
+    }
+
+    public Set<String> getSchemaNames()
+    {
+        // TODO: Step 2 -- Return the repositories for the owner of this catalog
+        return ImmutableSet.of();
+    }
+
+    public Set<String> getTableNames(String schema)
+    {
+        requireNonNull(schema, "schema is null");
+        return tables.keySet();
+    }
+
+    public GithubTable getTable(String schema, String tableName)
+    {
+        requireNonNull(schema, "schema is null");
+        requireNonNull(tableName, "tableName is null");
+        return tables.get(tableName);
+    }
+
+    private static Supplier<GithubApiEndpoints> endpointsSupplier(
+            final JsonCodec<GithubApiEndpoints> apiCodec, final GithubConfig config)
+            throws URITemplateException, URISyntaxException
+    {
+        VariableMap variables = VariableMap.newBuilder()
+                .addScalarValue("user", config.getOwner())
+                .addScalarValue("org", config.getOwner())
+                .addScalarValue("username", config.getUsername())
+                .addScalarValue("token", config.getToken())
+                .freeze();
+
+        URI apiRootUri = config.getApiRoot().toURI(variables);
+        return () -> {
+            try {
+                return lookupEndpoints(apiRootUri, config.getToken(), apiCodec);
+            }
+            catch (IOException e) {
+                throw Throwables.propagate(e);
+            }
+        };
+    }
+
+    private static GithubApiEndpoints lookupEndpoints(URI apiRootUri, String token,
+            JsonCodec<GithubApiEndpoints> catalogCodec)
+            throws IOException
+    {
+        byte[] json = getContent(apiRootUri, token);
+        return catalogCodec.fromJson(json);
+    }
+
+    private static Supplier<List<GithubSchema>> schemasSupplier(
+            final JsonCodec<List<GithubSchema>> schmemaCodec,
+            final Supplier<GithubApiEndpoints> endpoints,
+            final GithubConfig config)
+            throws URITemplateException, URISyntaxException
+    {
+        return () -> {
+            try {
+                return lookupSchemas(null, config.getToken(), schmemaCodec);
+            }
+            catch (IOException e) {
+                throw Throwables.propagate(e);
+            }
+        };
+    }
+
+    private static List<GithubSchema> lookupSchemas(URI schemaUri, String token,
+            JsonCodec<List<GithubSchema>> schemaCodec)
+            throws IOException
+    {
+        // TODO: Step 2 -- Use the GitHub REST API to retrieve the repositories (you may need to change
+        // the above method as well). You can use lookupEndpoints as a reference.
+        return ImmutableList.of();
+    }
+}
diff --git a/presto-github/src/main/java/com/facebook/presto/github/GithubColumn.java b/presto-github/src/main/java/com/facebook/presto/github/GithubColumn.java
new file mode 100644
index 000000000..ff20af536
--- /dev/null
+++ b/presto-github/src/main/java/com/facebook/presto/github/GithubColumn.java
@@ -0,0 +1,75 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.facebook.presto.github;
+
+import com.facebook.presto.spi.type.Type;
+import com.fasterxml.jackson.annotation.JsonProperty;
+
+import java.util.Objects;
+
+import static com.google.common.base.Preconditions.checkArgument;
+import static com.google.common.base.Strings.isNullOrEmpty;
+import static java.util.Objects.requireNonNull;
+
+public final class GithubColumn
+{
+    private final String name;
+    private final Type type;
+
+    public GithubColumn(String name, Type type)
+    {
+        checkArgument(!isNullOrEmpty(name), "name is null or is empty");
+        this.name = name;
+        this.type = requireNonNull(type, "type is null");
+    }
+
+    @JsonProperty
+    public String getName()
+    {
+        return name;
+    }
+
+    @JsonProperty
+    public Type getType()
+    {
+        return type;
+    }
+
+    @Override
+    public int hashCode()
+    {
+        return Objects.hash(name, type);
+    }
+
+    @Override
+    public boolean equals(Object obj)
+    {
+        if (this == obj) {
+            return true;
+        }
+        if (obj == null || getClass() != obj.getClass()) {
+            return false;
+        }
+
+        GithubColumn other = (GithubColumn) obj;
+        return Objects.equals(this.name, other.name) &&
+                Objects.equals(this.type, other.type);
+    }
+
+    @Override
+    public String toString()
+    {
+        return name + ":" + type;
+    }
+}
diff --git a/presto-github/src/main/java/com/facebook/presto/github/GithubColumnHandle.java b/presto-github/src/main/java/com/facebook/presto/github/GithubColumnHandle.java
new file mode 100644
index 000000000..45dbdc141
--- /dev/null
+++ b/presto-github/src/main/java/com/facebook/presto/github/GithubColumnHandle.java
@@ -0,0 +1,108 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.facebook.presto.github;
+
+import com.facebook.presto.spi.ColumnHandle;
+import com.facebook.presto.spi.ColumnMetadata;
+import com.facebook.presto.spi.type.Type;
+import com.fasterxml.jackson.annotation.JsonCreator;
+import com.fasterxml.jackson.annotation.JsonProperty;
+
+import java.util.Objects;
+
+import static com.google.common.base.MoreObjects.toStringHelper;
+import static java.util.Objects.requireNonNull;
+
+public final class GithubColumnHandle
+        implements ColumnHandle
+{
+    private final String connectorId;
+    private final String columnName;
+    private final Type columnType;
+    private final int ordinalPosition;
+
+    @JsonCreator
+    public GithubColumnHandle(
+            @JsonProperty("connectorId") String connectorId,
+            @JsonProperty("columnName") String columnName,
+            @JsonProperty("columnType") Type columnType,
+            @JsonProperty("ordinalPosition") int ordinalPosition)
+    {
+        this.connectorId = requireNonNull(connectorId, "connectorId is null");
+        this.columnName = requireNonNull(columnName, "columnName is null");
+        this.columnType = requireNonNull(columnType, "columnType is null");
+        this.ordinalPosition = ordinalPosition;
+    }
+
+    @JsonProperty
+    public String getConnectorId()
+    {
+        return connectorId;
+    }
+
+    @JsonProperty
+    public String getColumnName()
+    {
+        return columnName;
+    }
+
+    @JsonProperty
+    public Type getColumnType()
+    {
+        return columnType;
+    }
+
+    @JsonProperty
+    public int getOrdinalPosition()
+    {
+        return ordinalPosition;
+    }
+
+    public ColumnMetadata getColumnMetadata()
+    {
+        return new ColumnMetadata(columnName, columnType);
+    }
+
+    @Override
+    public int hashCode()
+    {
+        return Objects.hash(connectorId, columnName);
+    }
+
+    @Override
+    public boolean equals(Object obj)
+    {
+        if (this == obj) {
+            return true;
+        }
+        if ((obj == null) || (getClass() != obj.getClass())) {
+            return false;
+        }
+
+        GithubColumnHandle other = (GithubColumnHandle) obj;
+        return Objects.equals(this.connectorId, other.connectorId) &&
+                Objects.equals(this.columnName, other.columnName);
+    }
+
+    @Override
+    public String toString()
+    {
+        return toStringHelper(this)
+                .add("connectorId", connectorId)
+                .add("columnName", columnName)
+                .add("columnType", columnType)
+                .add("ordinalPosition", ordinalPosition)
+                .toString();
+    }
+}
diff --git a/presto-github/src/main/java/com/facebook/presto/github/GithubConfig.java b/presto-github/src/main/java/com/facebook/presto/github/GithubConfig.java
new file mode 100644
index 000000000..514b85519
--- /dev/null
+++ b/presto-github/src/main/java/com/facebook/presto/github/GithubConfig.java
@@ -0,0 +1,99 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.facebook.presto.github;
+
+import com.github.fge.uritemplate.URITemplate;
+import com.github.fge.uritemplate.URITemplateParseException;
+import io.airlift.configuration.Config;
+
+import javax.validation.constraints.NotNull;
+
+public class GithubConfig
+{
+    private URITemplate apiRoot = new URITemplate("https://{username}:{token}@api.github.com");
+    private String owner;
+    private String ownerType = "orgs";
+    private String username;
+    private String token;
+
+    public GithubConfig()
+            throws URITemplateParseException
+    {}
+
+    @NotNull
+    public URITemplate getApiRoot()
+    {
+        return apiRoot;
+    }
+
+    @NotNull
+    public String getOwner()
+    {
+        return owner;
+    }
+
+    @NotNull
+    public String getOwnerType()
+    {
+        return ownerType;
+    }
+
+    @NotNull
+    public String getUsername()
+    {
+        return username;
+    }
+
+    @NotNull
+    public String getToken()
+    {
+        return token;
+    }
+
+    @Config("github-apiroot")
+    public GithubConfig setApiRoot(String apiRoot)
+            throws URITemplateParseException
+    {
+        this.apiRoot = new URITemplate(apiRoot.replace("https://", "https://{username}:{token}@"));
+        return this;
+    }
+
+    @Config("github-owner")
+    public GithubConfig setOwner(String owner)
+    {
+        this.owner = owner;
+        return this;
+    }
+
+    @Config("github-owner-type")
+    public GithubConfig setOwnerType(String ownerType)
+    {
+        this.ownerType = ownerType;
+        return this;
+    }
+
+    @Config("github-username")
+    public GithubConfig setUsername(String username)
+    {
+        this.username = username;
+        return this;
+    }
+
+    @Config("github-token")
+    public GithubConfig setToken(String token)
+    {
+        this.token = token;
+        return this;
+    }
+}
diff --git a/presto-github/src/main/java/com/facebook/presto/github/GithubConnector.java b/presto-github/src/main/java/com/facebook/presto/github/GithubConnector.java
new file mode 100644
index 000000000..1a4984cf5
--- /dev/null
+++ b/presto-github/src/main/java/com/facebook/presto/github/GithubConnector.java
@@ -0,0 +1,87 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.facebook.presto.github;
+
+import com.facebook.presto.spi.connector.Connector;
+import com.facebook.presto.spi.connector.ConnectorMetadata;
+import com.facebook.presto.spi.connector.ConnectorRecordSetProvider;
+import com.facebook.presto.spi.connector.ConnectorSplitManager;
+import com.facebook.presto.spi.connector.ConnectorTransactionHandle;
+import com.facebook.presto.spi.transaction.IsolationLevel;
+import io.airlift.bootstrap.LifeCycleManager;
+import io.airlift.log.Logger;
+
+import javax.inject.Inject;
+
+import static com.facebook.presto.github.GithubTransactionHandle.INSTANCE;
+import static java.util.Objects.requireNonNull;
+
+public class GithubConnector
+        implements Connector
+{
+    private static final Logger log = Logger.get(GithubConnector.class);
+
+    private final LifeCycleManager lifeCycleManager;
+    private final GithubMetadata metadata;
+    private final GithubSplitManager splitManager;
+    private final GithubRecordSetProvider recordSetProvider;
+
+    @Inject
+    public GithubConnector(
+            LifeCycleManager lifeCycleManager,
+            GithubMetadata metadata,
+            GithubSplitManager splitManager,
+            GithubRecordSetProvider recordSetProvider)
+    {
+        this.lifeCycleManager = requireNonNull(lifeCycleManager, "lifeCycleManager is null");
+        this.metadata = requireNonNull(metadata, "metadata is null");
+        this.splitManager = requireNonNull(splitManager, "splitManager is null");
+        this.recordSetProvider = requireNonNull(recordSetProvider, "recordSetProvider is null");
+    }
+
+    @Override
+    public ConnectorTransactionHandle beginTransaction(IsolationLevel isolationLevel, boolean readOnly)
+    {
+        return INSTANCE;
+    }
+
+    @Override
+    public ConnectorMetadata getMetadata(ConnectorTransactionHandle transactionHandle)
+    {
+        return metadata;
+    }
+
+    @Override
+    public ConnectorSplitManager getSplitManager()
+    {
+        return splitManager;
+    }
+
+    @Override
+    public ConnectorRecordSetProvider getRecordSetProvider()
+    {
+        return recordSetProvider;
+    }
+
+    @Override
+    public final void shutdown()
+    {
+        try {
+            lifeCycleManager.stop();
+        }
+        catch (Exception e) {
+            log.error(e, "Error shutting down connector");
+        }
+    }
+}
diff --git a/presto-github/src/main/java/com/facebook/presto/github/GithubConnectorFactory.java b/presto-github/src/main/java/com/facebook/presto/github/GithubConnectorFactory.java
new file mode 100644
index 000000000..49ac671d9
--- /dev/null
+++ b/presto-github/src/main/java/com/facebook/presto/github/GithubConnectorFactory.java
@@ -0,0 +1,77 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.facebook.presto.github;
+
+import com.facebook.presto.spi.ConnectorHandleResolver;
+import com.facebook.presto.spi.connector.Connector;
+import com.facebook.presto.spi.connector.ConnectorFactory;
+import com.facebook.presto.spi.type.TypeManager;
+import com.google.common.base.Throwables;
+import com.google.common.collect.ImmutableMap;
+import com.google.inject.Injector;
+import io.airlift.bootstrap.Bootstrap;
+import io.airlift.json.JsonModule;
+
+import java.util.Map;
+
+import static java.util.Objects.requireNonNull;
+
+public class GithubConnectorFactory
+        implements ConnectorFactory
+{
+    private final TypeManager typeManager;
+    private final Map<String, String> optionalConfig;
+
+    public GithubConnectorFactory(TypeManager typeManager, Map<String, String> optionalConfig)
+    {
+        this.typeManager = requireNonNull(typeManager, "typeManager is null");
+        this.optionalConfig = ImmutableMap.copyOf(requireNonNull(optionalConfig, "optionalConfig is null"));
+    }
+
+    @Override
+    public String getName()
+    {
+        return "github";
+    }
+
+    @Override
+    public ConnectorHandleResolver getHandleResolver()
+    {
+        return new GithubHandleResolver();
+    }
+
+    @Override
+    public Connector create(final String connectorId, Map<String, String> requiredConfig)
+    {
+        requireNonNull(requiredConfig, "requiredConfig is null");
+        try {
+            // A plugin is not required to use Guice; it is just very convenient
+            Bootstrap app = new Bootstrap(
+                    new JsonModule(),
+                    new GithubModule(connectorId, typeManager));
+
+        Injector injector = app
+                    .strictConfig()
+                    .doNotInitializeLogging()
+                    .setRequiredConfigurationProperties(requiredConfig)
+                    .setOptionalConfigurationProperties(optionalConfig)
+                    .initialize();
+
+            return injector.getInstance(GithubConnector.class);
+        }
+        catch (Exception e) {
+            throw Throwables.propagate(e);
+        }
+    }
+}
diff --git a/presto-github/src/main/java/com/facebook/presto/github/GithubConnectorId.java b/presto-github/src/main/java/com/facebook/presto/github/GithubConnectorId.java
new file mode 100644
index 000000000..1d2632d74
--- /dev/null
+++ b/presto-github/src/main/java/com/facebook/presto/github/GithubConnectorId.java
@@ -0,0 +1,54 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.facebook.presto.github;
+
+import java.util.Objects;
+
+import static java.util.Objects.requireNonNull;
+
+public final class GithubConnectorId
+{
+    private final String id;
+
+    public GithubConnectorId(String id)
+    {
+        this.id = requireNonNull(id, "id is null");
+    }
+
+    @Override
+    public String toString()
+    {
+        return id;
+    }
+
+    @Override
+    public int hashCode()
+    {
+        return Objects.hash(id);
+    }
+
+    @Override
+    public boolean equals(Object obj)
+    {
+        if (this == obj) {
+            return true;
+        }
+        if ((obj == null) || (getClass() != obj.getClass())) {
+            return false;
+        }
+
+        GithubConnectorId other = (GithubConnectorId) obj;
+        return Objects.equals(this.id, other.id);
+    }
+}
diff --git a/presto-github/src/main/java/com/facebook/presto/github/GithubHandleResolver.java b/presto-github/src/main/java/com/facebook/presto/github/GithubHandleResolver.java
new file mode 100644
index 000000000..9b43499ec
--- /dev/null
+++ b/presto-github/src/main/java/com/facebook/presto/github/GithubHandleResolver.java
@@ -0,0 +1,55 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.facebook.presto.github;
+
+import com.facebook.presto.spi.ColumnHandle;
+import com.facebook.presto.spi.ConnectorHandleResolver;
+import com.facebook.presto.spi.ConnectorSplit;
+import com.facebook.presto.spi.ConnectorTableHandle;
+import com.facebook.presto.spi.ConnectorTableLayoutHandle;
+import com.facebook.presto.spi.connector.ConnectorTransactionHandle;
+
+public class GithubHandleResolver
+        implements ConnectorHandleResolver
+{
+    @Override
+    public Class<? extends ConnectorTableLayoutHandle> getTableLayoutHandleClass()
+    {
+        return GithubTableLayoutHandle.class;
+    }
+
+    @Override
+    public Class<? extends ConnectorTableHandle> getTableHandleClass()
+    {
+        return GithubTableHandle.class;
+    }
+
+    @Override
+    public Class<? extends ColumnHandle> getColumnHandleClass()
+    {
+        return GithubColumnHandle.class;
+    }
+
+    @Override
+    public Class<? extends ConnectorSplit> getSplitClass()
+    {
+        return GithubSplit.class;
+    }
+
+    @Override
+    public Class<? extends ConnectorTransactionHandle> getTransactionHandleClass()
+    {
+        return GithubTransactionHandle.class;
+    }
+}
diff --git a/presto-github/src/main/java/com/facebook/presto/github/GithubMetadata.java b/presto-github/src/main/java/com/facebook/presto/github/GithubMetadata.java
new file mode 100644
index 000000000..cc669cf82
--- /dev/null
+++ b/presto-github/src/main/java/com/facebook/presto/github/GithubMetadata.java
@@ -0,0 +1,189 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.facebook.presto.github;
+
+import com.facebook.presto.spi.ColumnHandle;
+import com.facebook.presto.spi.ColumnMetadata;
+import com.facebook.presto.spi.ConnectorSession;
+import com.facebook.presto.spi.ConnectorTableHandle;
+import com.facebook.presto.spi.ConnectorTableLayout;
+import com.facebook.presto.spi.ConnectorTableLayoutHandle;
+import com.facebook.presto.spi.ConnectorTableLayoutResult;
+import com.facebook.presto.spi.ConnectorTableMetadata;
+import com.facebook.presto.spi.Constraint;
+import com.facebook.presto.spi.SchemaTableName;
+import com.facebook.presto.spi.SchemaTablePrefix;
+import com.facebook.presto.spi.TableNotFoundException;
+import com.facebook.presto.spi.connector.ConnectorMetadata;
+import com.github.fge.uritemplate.URITemplateParseException;
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableSet;
+
+import javax.inject.Inject;
+
+import java.util.List;
+import java.util.Map;
+import java.util.Optional;
+import java.util.Set;
+
+import static com.facebook.presto.github.Types.checkType;
+import static java.util.Objects.requireNonNull;
+
+public class GithubMetadata
+        implements ConnectorMetadata
+{
+    private final String connectorId;
+
+    private final GithubClient githubClient;
+    private final GithubConfig config;
+
+    @Inject
+    public GithubMetadata(GithubConnectorId connectorId, GithubClient githubClient,
+            GithubConfig config)
+            throws URITemplateParseException
+    {
+        this.connectorId = requireNonNull(connectorId, "connectorId is null").toString();
+        this.githubClient = requireNonNull(githubClient, "client is null");
+        this.config = requireNonNull(config, "config is null");
+    }
+
+    @Override
+    public List<String> listSchemaNames(ConnectorSession session)
+    {
+        return listSchemaNames();
+    }
+
+    public List<String> listSchemaNames()
+    {
+        return ImmutableList.copyOf(githubClient.getSchemaNames());
+    }
+
+    @Override
+    public GithubTableHandle getTableHandle(ConnectorSession session, SchemaTableName tableName)
+    {
+        if (!listSchemaNames(session).contains(tableName.getSchemaName())) {
+            return null;
+        }
+
+        // TODO: Step 3: Return the "stargazers" table from the GithubClient
+        GithubTable table = githubClient.getTable(tableName.getSchemaName(), tableName.getTableName());
+        if (table == null) {
+            return null;
+        }
+
+        // TODO: Step 3 - Construct an appropriate GithubTableHandle and return it
+        return null;
+    }
+
+    @Override
+    public List<ConnectorTableLayoutResult> getTableLayouts(ConnectorSession session, ConnectorTableHandle table, Constraint<ColumnHandle> constraint, Optional<Set<ColumnHandle>> desiredColumns)
+    {
+        GithubTableHandle tableHandle = checkType(table, GithubTableHandle.class, "table");
+        ConnectorTableLayout layout = new ConnectorTableLayout(new GithubTableLayoutHandle(tableHandle));
+        return ImmutableList.of(new ConnectorTableLayoutResult(layout, constraint.getSummary()));
+    }
+
+    @Override
+    public ConnectorTableLayout getTableLayout(ConnectorSession session, ConnectorTableLayoutHandle handle)
+    {
+        return new ConnectorTableLayout(handle);
+    }
+
+    @Override
+    public ConnectorTableMetadata getTableMetadata(ConnectorSession session, ConnectorTableHandle table)
+    {
+        GithubTableHandle githubTableHandle = checkType(table, GithubTableHandle.class, "table");
+        SchemaTableName tableName = new SchemaTableName(githubTableHandle.getSchemaName(), githubTableHandle.getTableName());
+
+        return getTableMetadata(tableName);
+    }
+
+    @Override
+    public List<SchemaTableName> listTables(ConnectorSession session, String schemaNameOrNull)
+    {
+        Set<String> schemaNames;
+        if (schemaNameOrNull != null) {
+            schemaNames = ImmutableSet.of(schemaNameOrNull);
+        }
+        else {
+            schemaNames = githubClient.getSchemaNames();
+        }
+
+        ImmutableList.Builder<SchemaTableName> builder = ImmutableList.builder();
+        for (String schemaName : schemaNames) {
+            for (String tableName : githubClient.getTableNames(schemaName)) {
+                builder.add(new SchemaTableName(schemaName, tableName));
+            }
+        }
+        return builder.build();
+    }
+
+    @Override
+    public Map<String, ColumnHandle> getColumnHandles(ConnectorSession session, ConnectorTableHandle tableHandle)
+    {
+        GithubTableHandle githubTableHandle = checkType(tableHandle, GithubTableHandle.class, "tableHandle");
+
+        GithubTable table = githubClient.getTable(githubTableHandle.getSchemaName(), githubTableHandle.getTableName());
+        if (table == null) {
+            throw new TableNotFoundException(githubTableHandle.toSchemaTableName());
+        }
+
+        ImmutableMap.Builder<String, ColumnHandle> columnHandles = ImmutableMap.builder();
+        int index = 0;
+        for (ColumnMetadata column : table.getColumnsMetadata()) {
+            columnHandles.put(column.getName(), new GithubColumnHandle(connectorId, column.getName(), column.getType(), index));
+            index++;
+        }
+        return columnHandles.build();
+    }
+
+    @Override
+    public Map<SchemaTableName, List<ColumnMetadata>> listTableColumns(ConnectorSession session, SchemaTablePrefix prefix)
+    {
+        requireNonNull(prefix, "prefix is null");
+        // TODO: Step 3 - Get the correct column list based on the given SchemaTablePrefix.
+        ImmutableMap.Builder<SchemaTableName, List<ColumnMetadata>> columns = ImmutableMap.builder();
+        return columns.build();
+    }
+
+    private ConnectorTableMetadata getTableMetadata(SchemaTableName tableName)
+    {
+        if (!listSchemaNames().contains(tableName.getSchemaName())) {
+            return null;
+        }
+
+        GithubTable table = githubClient.getTable(tableName.getSchemaName(), tableName.getTableName());
+        if (table == null) {
+            return null;
+        }
+
+        return new ConnectorTableMetadata(tableName, table.getColumnsMetadata());
+    }
+
+    private List<SchemaTableName> listTables(ConnectorSession session, SchemaTablePrefix prefix)
+    {
+        if (prefix.getTableName() == null) {
+            return listTables(session, prefix.getSchemaName());
+        }
+        return ImmutableList.of(new SchemaTableName(prefix.getSchemaName(), prefix.getTableName()));
+    }
+
+    @Override
+    public ColumnMetadata getColumnMetadata(ConnectorSession session, ConnectorTableHandle tableHandle, ColumnHandle columnHandle)
+    {
+        checkType(tableHandle, GithubTableHandle.class, "tableHandle");
+        return checkType(columnHandle, GithubColumnHandle.class, "columnHandle").getColumnMetadata();
+    }
+}
diff --git a/presto-github/src/main/java/com/facebook/presto/github/GithubModule.java b/presto-github/src/main/java/com/facebook/presto/github/GithubModule.java
new file mode 100644
index 000000000..e2eecaccd
--- /dev/null
+++ b/presto-github/src/main/java/com/facebook/presto/github/GithubModule.java
@@ -0,0 +1,53 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.facebook.presto.github;
+
+import com.facebook.presto.spi.type.TypeManager;
+import com.google.inject.Binder;
+import com.google.inject.Module;
+import com.google.inject.Scopes;
+
+import static io.airlift.configuration.ConfigBinder.configBinder;
+import static io.airlift.json.JsonCodecBinder.jsonCodecBinder;
+import static java.util.Objects.requireNonNull;
+
+public class GithubModule
+        implements Module
+{
+    private final String connectorId;
+    private final TypeManager typeManager;
+
+    public GithubModule(String connectorId, TypeManager typeManager)
+    {
+        this.connectorId = requireNonNull(connectorId, "connector id is null");
+        this.typeManager = requireNonNull(typeManager, "typeManager is null");
+    }
+
+    @Override
+    public void configure(Binder binder)
+    {
+        binder.bind(TypeManager.class).toInstance(typeManager);
+
+        binder.bind(GithubConnector.class).in(Scopes.SINGLETON);
+        binder.bind(GithubConnectorId.class).toInstance(new GithubConnectorId(connectorId));
+        binder.bind(GithubMetadata.class).in(Scopes.SINGLETON);
+        binder.bind(GithubClient.class).in(Scopes.SINGLETON);
+        binder.bind(GithubSplitManager.class).in(Scopes.SINGLETON);
+        binder.bind(GithubRecordSetProvider.class).in(Scopes.SINGLETON);
+        configBinder(binder).bindConfig(GithubConfig.class);
+
+        jsonCodecBinder(binder).bindJsonCodec(GithubApiEndpoints.class);
+        jsonCodecBinder(binder).bindListJsonCodec(GithubSchema.class);
+    }
+}
diff --git a/presto-github/src/main/java/com/facebook/presto/github/GithubPlugin.java b/presto-github/src/main/java/com/facebook/presto/github/GithubPlugin.java
new file mode 100644
index 000000000..c9671f901
--- /dev/null
+++ b/presto-github/src/main/java/com/facebook/presto/github/GithubPlugin.java
@@ -0,0 +1,60 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.facebook.presto.github;
+
+import com.facebook.presto.spi.Plugin;
+import com.facebook.presto.spi.connector.ConnectorFactory;
+import com.facebook.presto.spi.type.TypeManager;
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableMap;
+
+import javax.inject.Inject;
+
+import java.util.List;
+import java.util.Map;
+
+import static java.util.Objects.requireNonNull;
+
+public class GithubPlugin
+        implements Plugin
+{
+    private TypeManager typeManager;
+    private Map<String, String> optionalConfig = ImmutableMap.of();
+
+    @Override
+    public synchronized void setOptionalConfig(Map<String, String> optionalConfig)
+    {
+        this.optionalConfig = ImmutableMap.copyOf(requireNonNull(optionalConfig, "optionalConfig is null"));
+    }
+
+    @Inject
+    public synchronized void setTypeManager(TypeManager typeManager)
+    {
+        this.typeManager = typeManager;
+    }
+
+    public synchronized Map<String, String> getOptionalConfig()
+    {
+        return optionalConfig;
+    }
+
+    @Override
+    public synchronized <T> List<T> getServices(Class<T> type)
+    {
+        if (type == ConnectorFactory.class) {
+            return ImmutableList.of(type.cast(new GithubConnectorFactory(typeManager, getOptionalConfig())));
+        }
+        return ImmutableList.of();
+    }
+}
diff --git a/presto-github/src/main/java/com/facebook/presto/github/GithubRecordCursor.java b/presto-github/src/main/java/com/facebook/presto/github/GithubRecordCursor.java
new file mode 100644
index 000000000..f820479bd
--- /dev/null
+++ b/presto-github/src/main/java/com/facebook/presto/github/GithubRecordCursor.java
@@ -0,0 +1,154 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.facebook.presto.github;
+
+import com.facebook.presto.spi.RecordCursor;
+import com.facebook.presto.spi.type.Type;
+import com.google.common.base.Strings;
+import io.airlift.slice.Slice;
+import io.airlift.slice.Slices;
+
+import java.net.URI;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+
+import static com.facebook.presto.spi.type.BigintType.BIGINT;
+import static com.facebook.presto.spi.type.BooleanType.BOOLEAN;
+import static com.facebook.presto.spi.type.DoubleType.DOUBLE;
+import static com.facebook.presto.spi.type.VarcharType.createUnboundedVarcharType;
+import static com.google.common.base.Preconditions.checkArgument;
+import static com.google.common.base.Preconditions.checkState;
+
+public class GithubRecordCursor
+        implements RecordCursor
+{
+   private final List<GithubColumnHandle> columnHandles;
+    private final String[] fieldToColumnName;
+
+    private final Iterator<Map<String, Object>> rows;
+    private final long totalBytes;
+
+    private Map<String, Object> row;
+
+    public GithubRecordCursor(List<GithubColumnHandle> columnHandles, URI sourceUri,
+            String token)
+    {
+        this.columnHandles = columnHandles;
+
+        fieldToColumnName = new String[columnHandles.size()];
+        for (int i = 0; i < columnHandles.size(); i++) {
+            GithubColumnHandle columnHandle = columnHandles.get(i);
+            fieldToColumnName[i] = columnHandle.getColumnName();
+        }
+
+        // TODO: Step 4 - Retrieve JSON for the given URI and store it in rows.
+        // See GithubClient#getContent and GithubClient#parseJsonBytesToRecordList
+        totalBytes = 0;
+        rows = new ArrayList<Map<String, Object>>().iterator();
+    }
+
+    @Override
+    public long getTotalBytes()
+    {
+        return totalBytes;
+    }
+
+    @Override
+    public long getCompletedBytes()
+    {
+        return totalBytes;
+    }
+
+    @Override
+    public long getReadTimeNanos()
+    {
+        return 0;
+    }
+
+    @Override
+    public Type getType(int field)
+    {
+        checkArgument(field < columnHandles.size(), "Invalid field index");
+        return columnHandles.get(field).getColumnType();
+    }
+
+    @Override
+    public boolean advanceNextPosition()
+    {
+        // TODO: Step 4 - Implement advanceNextPosition
+        return false;
+    }
+
+    private String getFieldValue(int field)
+    {
+        checkState(row != null, "Cursor has not been advanced yet");
+
+        String columnName = fieldToColumnName[field];
+        return row.get(columnName).toString();
+    }
+
+    @Override
+    public boolean getBoolean(int field)
+    {
+        checkFieldType(field, BOOLEAN);
+        return Boolean.parseBoolean(getFieldValue(field));
+    }
+
+    @Override
+    public long getLong(int field)
+    {
+        checkFieldType(field, BIGINT);
+        return Long.parseLong(getFieldValue(field));
+    }
+
+    @Override
+    public double getDouble(int field)
+    {
+        checkFieldType(field, DOUBLE);
+        return Double.parseDouble(getFieldValue(field));
+    }
+
+    @Override
+    public Slice getSlice(int field)
+    {
+        checkFieldType(field, createUnboundedVarcharType());
+        return Slices.utf8Slice(getFieldValue(field));
+    }
+
+    @Override
+    public Object getObject(int field)
+    {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public boolean isNull(int field)
+    {
+        checkArgument(field < columnHandles.size(), "Invalid field index");
+        return Strings.isNullOrEmpty(getFieldValue(field));
+    }
+
+    private void checkFieldType(int field, Type expected)
+    {
+        Type actual = getType(field);
+        checkArgument(actual.equals(expected), "Expected field %s to be type %s but is %s", field, expected, actual);
+    }
+
+    @Override
+    public void close()
+    {
+    }
+}
diff --git a/presto-github/src/main/java/com/facebook/presto/github/GithubRecordSet.java b/presto-github/src/main/java/com/facebook/presto/github/GithubRecordSet.java
new file mode 100644
index 000000000..37311accf
--- /dev/null
+++ b/presto-github/src/main/java/com/facebook/presto/github/GithubRecordSet.java
@@ -0,0 +1,47 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.facebook.presto.github;
+
+import com.facebook.presto.spi.RecordCursor;
+import com.facebook.presto.spi.RecordSet;
+import com.facebook.presto.spi.type.Type;
+import com.google.common.collect.ImmutableList;
+
+import java.util.List;
+
+public class GithubRecordSet
+        implements RecordSet
+{
+    private final List<Type> columnTypes;
+
+    public GithubRecordSet()
+    {
+        // TODO: Step 4 - Pass in the appropriate column types
+        ImmutableList.Builder<Type> types = ImmutableList.builder();
+        this.columnTypes = types.build();
+    }
+
+    @Override
+    public List<Type> getColumnTypes()
+    {
+        return columnTypes;
+    }
+
+    @Override
+    public RecordCursor cursor()
+    {
+        // TODO: Step 4 - Return a RecordCursor
+        return null;
+    }
+}
diff --git a/presto-github/src/main/java/com/facebook/presto/github/GithubRecordSetProvider.java b/presto-github/src/main/java/com/facebook/presto/github/GithubRecordSetProvider.java
new file mode 100644
index 000000000..132b00db5
--- /dev/null
+++ b/presto-github/src/main/java/com/facebook/presto/github/GithubRecordSetProvider.java
@@ -0,0 +1,45 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.facebook.presto.github;
+
+import com.facebook.presto.spi.ColumnHandle;
+import com.facebook.presto.spi.ConnectorSession;
+import com.facebook.presto.spi.ConnectorSplit;
+import com.facebook.presto.spi.RecordSet;
+import com.facebook.presto.spi.connector.ConnectorRecordSetProvider;
+import com.facebook.presto.spi.connector.ConnectorTransactionHandle;
+
+import javax.inject.Inject;
+
+import java.util.List;
+
+import static java.util.Objects.requireNonNull;
+
+public class GithubRecordSetProvider
+        implements ConnectorRecordSetProvider
+{
+    private final String connectorId;
+
+    @Inject
+    public GithubRecordSetProvider(GithubConnectorId connectorId)
+    {
+        this.connectorId = requireNonNull(connectorId, "connectorId is null").toString();
+    }
+
+    @Override
+    public RecordSet getRecordSet(ConnectorTransactionHandle transactionHandle, ConnectorSession session, ConnectorSplit split, List<? extends ColumnHandle> columns)
+    {
+        return new GithubRecordSet();
+    }
+}
diff --git a/presto-github/src/main/java/com/facebook/presto/github/GithubSchema.java b/presto-github/src/main/java/com/facebook/presto/github/GithubSchema.java
new file mode 100644
index 000000000..0c26ecaa6
--- /dev/null
+++ b/presto-github/src/main/java/com/facebook/presto/github/GithubSchema.java
@@ -0,0 +1,39 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.facebook.presto.github;
+
+import com.fasterxml.jackson.annotation.JsonCreator;
+import com.fasterxml.jackson.annotation.JsonProperty;
+
+import static com.google.common.base.Preconditions.checkArgument;
+import static com.google.common.base.Strings.isNullOrEmpty;
+import static java.util.Objects.requireNonNull;
+
+public class GithubSchema
+{
+    private final String name;
+
+    @JsonCreator
+    public GithubSchema(@JsonProperty("name") String name)
+    {
+        checkArgument(!isNullOrEmpty(name), "name is null or is empty");
+        this.name = requireNonNull(name, "name is null");
+    }
+
+    @JsonProperty
+    public String getName()
+    {
+        return name;
+    }
+}
diff --git a/presto-github/src/main/java/com/facebook/presto/github/GithubSplit.java b/presto-github/src/main/java/com/facebook/presto/github/GithubSplit.java
new file mode 100644
index 000000000..523d394ed
--- /dev/null
+++ b/presto-github/src/main/java/com/facebook/presto/github/GithubSplit.java
@@ -0,0 +1,54 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.facebook.presto.github;
+
+import com.facebook.presto.spi.ConnectorSplit;
+import com.facebook.presto.spi.HostAddress;
+import com.fasterxml.jackson.annotation.JsonCreator;
+import com.google.common.collect.ImmutableList;
+
+import java.util.List;
+
+public class GithubSplit
+        implements ConnectorSplit
+{
+    private final boolean remotelyAccessible;
+    private final List<HostAddress> addresses;
+
+    @JsonCreator
+    public GithubSplit()
+    {
+        remotelyAccessible = true;
+        addresses = ImmutableList.of();
+    }
+
+    @Override
+    public boolean isRemotelyAccessible()
+    {
+        // only http or https is remotely accessible
+        return remotelyAccessible;
+    }
+
+    @Override
+    public List<HostAddress> getAddresses()
+    {
+        return addresses;
+    }
+
+    @Override
+    public Object getInfo()
+    {
+        return this;
+    }
+}
diff --git a/presto-github/src/main/java/com/facebook/presto/github/GithubSplitManager.java b/presto-github/src/main/java/com/facebook/presto/github/GithubSplitManager.java
new file mode 100644
index 000000000..7f06a2470
--- /dev/null
+++ b/presto-github/src/main/java/com/facebook/presto/github/GithubSplitManager.java
@@ -0,0 +1,60 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.facebook.presto.github;
+
+import com.facebook.presto.spi.ConnectorSession;
+import com.facebook.presto.spi.ConnectorSplit;
+import com.facebook.presto.spi.ConnectorSplitSource;
+import com.facebook.presto.spi.ConnectorTableLayoutHandle;
+import com.facebook.presto.spi.FixedSplitSource;
+import com.facebook.presto.spi.connector.ConnectorSplitManager;
+import com.facebook.presto.spi.connector.ConnectorTransactionHandle;
+
+import javax.inject.Inject;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+import static java.util.Objects.requireNonNull;
+
+public class GithubSplitManager
+        implements ConnectorSplitManager
+{
+    private final String connectorId;
+    private final GithubClient githubClient;
+    private final GithubConfig config;
+
+    @Inject
+    public GithubSplitManager(GithubConnectorId connectorId, GithubClient githubClient,
+            GithubConfig config)
+    {
+        this.connectorId = requireNonNull(connectorId, "connectorId is null").toString();
+        this.githubClient = requireNonNull(githubClient, "client is null");
+        this.config = requireNonNull(config);
+    }
+
+    @Override
+    public ConnectorSplitSource getSplits(ConnectorTransactionHandle handle, ConnectorSession session, ConnectorTableLayoutHandle layout)
+    {
+        // TODO: Step 4 - Create a split for each page in the results from the GitHub API.
+        // You will need to fill in the query-specific values in the URITemplate.
+        // You can use GithubClient#getLastPage to see how many pages there are.
+
+        List<ConnectorSplit> splits = new ArrayList<>();
+        Collections.shuffle(splits);
+
+        return new FixedSplitSource(splits);
+    }
+}
diff --git a/presto-github/src/main/java/com/facebook/presto/github/GithubTable.java b/presto-github/src/main/java/com/facebook/presto/github/GithubTable.java
new file mode 100644
index 000000000..3141c998b
--- /dev/null
+++ b/presto-github/src/main/java/com/facebook/presto/github/GithubTable.java
@@ -0,0 +1,62 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.facebook.presto.github;
+
+import com.facebook.presto.spi.ColumnMetadata;
+import com.fasterxml.jackson.annotation.JsonCreator;
+import com.github.fge.uritemplate.URITemplate;
+import com.google.common.collect.ImmutableList;
+
+import java.util.List;
+
+public class GithubTable
+{
+    private String name;
+    private List<GithubColumn> columns;
+    private List<ColumnMetadata> columnsMetadata;
+    private URITemplate sourceTemplate;
+    private String token;
+
+    @JsonCreator
+    public GithubTable()
+    {
+        ImmutableList.Builder<ColumnMetadata> columnsMetadata = ImmutableList.builder();
+        this.columnsMetadata = columnsMetadata.build();
+    }
+
+    public String getName()
+    {
+        return name;
+    }
+
+    public List<GithubColumn> getColumns()
+    {
+        return columns;
+    }
+
+    public URITemplate getSourceTemplate()
+    {
+        return sourceTemplate;
+    }
+
+    public List<ColumnMetadata> getColumnsMetadata()
+    {
+        return columnsMetadata;
+    }
+
+    public String getToken()
+    {
+        return token;
+    }
+}
diff --git a/presto-github/src/main/java/com/facebook/presto/github/GithubTableHandle.java b/presto-github/src/main/java/com/facebook/presto/github/GithubTableHandle.java
new file mode 100644
index 000000000..1b6bb11be
--- /dev/null
+++ b/presto-github/src/main/java/com/facebook/presto/github/GithubTableHandle.java
@@ -0,0 +1,84 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.facebook.presto.github;
+
+import com.facebook.presto.spi.ConnectorTableHandle;
+import com.facebook.presto.spi.SchemaTableName;
+import com.fasterxml.jackson.annotation.JsonCreator;
+import com.fasterxml.jackson.annotation.JsonProperty;
+import com.google.common.base.Joiner;
+
+import java.util.Objects;
+
+import static java.util.Objects.requireNonNull;
+
+public final class GithubTableHandle
+        implements ConnectorTableHandle
+{
+    private final String schemaName;
+    private final String tableName;
+
+    @JsonCreator
+    public GithubTableHandle(
+            @JsonProperty("schemaName") String schemaName,
+            @JsonProperty("tableName") String tableName)
+    {
+        this.schemaName = requireNonNull(schemaName, "schemaName is null");
+        this.tableName = requireNonNull(tableName, "tableName is null");
+    }
+
+    @JsonProperty
+    public String getSchemaName()
+    {
+        return schemaName;
+    }
+
+    @JsonProperty
+    public String getTableName()
+    {
+        return tableName;
+    }
+
+    public SchemaTableName toSchemaTableName()
+    {
+        return new SchemaTableName(schemaName, tableName);
+    }
+
+    @Override
+    public int hashCode()
+    {
+        return Objects.hash();
+    }
+
+    @Override
+    public boolean equals(Object obj)
+    {
+        if (this == obj) {
+            return true;
+        }
+        if ((obj == null) || (getClass() != obj.getClass())) {
+            return false;
+        }
+
+        GithubTableHandle other = (GithubTableHandle) obj;
+        return Objects.equals(this.schemaName, other.schemaName) &&
+                Objects.equals(this.tableName, other.tableName);
+    }
+
+    @Override
+    public String toString()
+    {
+        return Joiner.on(":").join(schemaName, tableName);
+    }
+}
diff --git a/presto-github/src/main/java/com/facebook/presto/github/GithubTableLayoutHandle.java b/presto-github/src/main/java/com/facebook/presto/github/GithubTableLayoutHandle.java
new file mode 100644
index 000000000..ce8cd57de
--- /dev/null
+++ b/presto-github/src/main/java/com/facebook/presto/github/GithubTableLayoutHandle.java
@@ -0,0 +1,63 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.facebook.presto.github;
+
+import com.facebook.presto.spi.ConnectorTableLayoutHandle;
+import com.fasterxml.jackson.annotation.JsonCreator;
+import com.fasterxml.jackson.annotation.JsonProperty;
+
+import java.util.Objects;
+
+public class GithubTableLayoutHandle
+    implements ConnectorTableLayoutHandle
+{
+    private final GithubTableHandle table;
+
+    @JsonCreator
+    public GithubTableLayoutHandle(@JsonProperty("table") GithubTableHandle table)
+    {
+        this.table = table;
+    }
+
+    @JsonProperty
+    public GithubTableHandle getTable()
+    {
+        return table;
+    }
+
+    @Override
+    public boolean equals(Object o)
+    {
+        if (this == o) {
+            return true;
+        }
+        if (o == null || getClass() != o.getClass()) {
+            return false;
+        }
+        GithubTableLayoutHandle that = (GithubTableLayoutHandle) o;
+        return Objects.equals(table, that.table);
+    }
+
+    @Override
+    public int hashCode()
+    {
+        return Objects.hash(table);
+    }
+
+    @Override
+    public String toString()
+    {
+        return table.toString();
+    }
+}
diff --git a/presto-github/src/main/java/com/facebook/presto/github/GithubTransactionHandle.java b/presto-github/src/main/java/com/facebook/presto/github/GithubTransactionHandle.java
new file mode 100644
index 000000000..63f780215
--- /dev/null
+++ b/presto-github/src/main/java/com/facebook/presto/github/GithubTransactionHandle.java
@@ -0,0 +1,23 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.presto.github;
+
+import com.facebook.presto.spi.connector.ConnectorTransactionHandle;
+
+public enum GithubTransactionHandle
+        implements ConnectorTransactionHandle
+{
+    INSTANCE
+}
diff --git a/presto-github/src/main/java/com/facebook/presto/github/Types.java b/presto-github/src/main/java/com/facebook/presto/github/Types.java
new file mode 100644
index 000000000..83b2fe9dd
--- /dev/null
+++ b/presto-github/src/main/java/com/facebook/presto/github/Types.java
@@ -0,0 +1,35 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.facebook.presto.github;
+
+import static com.google.common.base.Preconditions.checkArgument;
+import static java.lang.String.format;
+
+final class Types
+{
+    private Types() {}
+
+    public static <A, B extends A> B checkType(A value, Class<B> target, String name)
+    {
+        if (value == null) {
+            throw new NullPointerException(format("%s is null", name));
+        }
+        checkArgument(target.isInstance(value),
+                "%s must be of type %s, not %s",
+                name,
+                target.getName(),
+                value.getClass().getName());
+        return target.cast(value);
+    }
+}
